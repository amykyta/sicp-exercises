#lang planet neil/sicp

; extended exercise on intervals in chapter 2

(define (make-interval a b) (cons a b))
(define (upper-bound x) (car x))
(define (lower-bound x) (cdr x))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (mul-interval x 
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))

(define (sub-interval x y)
  (make-interval (- (lower-bound x) (lower-bound y))
                 (- (upper-bound x) (upper-bound y))))

(define one-to-four (list 1 2 3 4))

(define (last-pair items)
  (if (null? (cdr items))
      (car items)
      (last-pair (cdr items))))

(last-pair one-to-four)

(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))

(define (append-plus list1 list2)
  (cond ((null? list1) list2)
        ((not (pair? list1)) (cons list1 list2))
      ;  ((not (pair? list2)) (cons 
        (else (cons (car list1) (append-plus (cdr list1) list2)))))

;(define (reverse items)
;  (if (null? items)
;      
;      (cons (reverse (cdr items)) (cons (car items) nil))))

(reverse one-to-four)


; i'm surprised this works, the branching in the elseif didnt seem like it
; would work, something about that recursion felt 'non-linear'
(define (same-parity . w)
  (define test (if (even? (car w)) even? odd?))
  (define (iter remaining-items)
    (if (null? remaining-items)
        nil
        (if (test (car remaining-items))
            (cons (car remaining-items)
                  (iter (cdr remaining-items)))
            (iter (cdr remaining-items)))))
  (iter w))



;(same-parity 1 2 3 4 5 6 7)
;(same-parity 2  3 4 5 6 7)

(define (square x)
  (* x x))

;(define (square-list items)
;  (if (null? items)
;      nil
;      (cons (square (car items)) (square-list (cdr items)))))

(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things) 
              (cons (square (car things))
                    answer))))
  (iter items nil))

(define (reverse-iter items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons (car things) answer))))
  (iter items nil))



(reverse-iter (list 1 2 3 4 5 6))

(square-list (list 1 2 3 4 5))

(define (square-list-map items)
  (map square items))

(display (square-list-map (list 1 2 3 4 5)))

(define (for-each action items)
  (define (act items)
    (cond ((null? items) true)
          (else
            (action (car items))
            (act (cdr items)))))
  (act items))

(for-each (lambda (x) (newline) (display x)) (list 34 33 15 18 25))
        

;2.25
;(cadr (caddr (list 1 3 (list 5 7) 9)))
;(caar (list (list 7)))
;(cadadr (cadadr (cadadr (list 1 
;                              (list 2
;                                    (list 3
;                                          (list 4
;                                                (list 5
;                                                      (list 6 7)))))))))

(define x (list 1 2 3))
(define y (list 4 5 6))

(append x y)
;(1 2 3 4 5 6)
(newline)
(display (cons x y))
(newline)
;((1 2 3) 4 5 6)
(display (list x y))
;((1 2 3) (4 5 6))

; problem #2.27
; modify the below procedure to do deep reverse
; just needed to check if what's being added to the reversed list
; is a pair or not, if it's a pair, reverse it too
;(define (reverse-iter items)
;  (define (iter things answer)
;    (if (null? things)
;        answer
;        (iter (cdr things)
;              (cons (car things) answer))))
;  (iter items nil))
(define (reverse-deep items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons (if (pair? (car things))
                        (reverse-deep (car things))
                        (car things))
                    answer))))
  (iter items nil))

(newline)
(define xx (list (list 1 2) (list 3 4)))
(display xx)
(newline)
(display (reverse-deep xx))
(newline)
(display (reverse-iter xx))
(newline)


; 2.28
(define (fringe items)
; this was the solution by bill the lizard
; i tried this myself but got a bunch of nulls in the result
; because i didn't handle the null case
; this solution doesn't require a atomic value handling append-plus
;    (cond ((null? items) nil)
;        ((not (pair? items)) (list items))
;        (else (append 
;               (fringe (car items)) 
;               (fringe (cdr items))))))
  (if (not (pair? items)) 
      items
      (append-plus (fringe (car items)) (fringe (cdr items)))))

(define xxx (list (list 1 2) (list 3 4)))

(display (fringe (list xxx xxx)))

; 2.29

(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (car (cdr mobile)))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
;  (display "branch")
;  (newline)
;  (display branch)
;  (newline)
  (car (cdr branch)))

(define (branch-weight branch)
  (let ((struct (branch-structure branch)))
    (if (number? struct) 
        struct
        (+ (branch-weight (left-branch struct))
           (branch-weight (right-branch struct))))))


(define (total-weight mobile)
  (let ((left (left-branch mobile))
        (right (right-branch mobile)))
    (+ (branch-weight left) (branch-weight right))))
;    (let ((structure-left (branch-structure left))
;          (structure-right (branch-structure right)))
;      (+ (if (number? structure-left) structure-left (total-weight structure-left))
;         (if (number? structure-right) structure-right (total-weight structure-right))))))

(define b (make-mobile 
               (make-branch 2 
                            (make-mobile 
                             (make-branch 2 12)
                             (make-branch 2 9)))
               (make-branch 2 10)))
(newline)
(total-weight b)

; 2.29 part (c) im amazed this works...
(define (balanced? mobile)
  (let ((torque (lambda (branch) 
                  (* (branch-weight branch) (branch-length branch)))))
    (cond ((= (torque (left-branch mobile))
              (torque (right-branch mobile)))
           (let ((left-b-pair? (pair? (branch-structure (left-branch mobile))))
                 (right-b-pair? (pair? (branch-structure (right-branch mobile)))))
             (cond ((and (not left-b-pair?) (not right-b-pair?))
                    #t)
                   ((and left-b-pair? right-b-pair?)
                    (and (balanced? (branch-structure (left-branch mobile)))
                         (balanced? (branch-structure (right-branch mobile)))))
                   (left-b-pair?
                    (balanced? (branch-structure (left-branch mobile))))
                   (right-b-pair?
                    (balanced? (branch-structure (right-branch mobile)))))))    
          (else #f))))

(balanced? b)

; 2.29 part (d)
; very little..just the corresponding selectors replacing
; (car (cdr x)) with just (cdr x)
#lang planet neil/sicp

(define (make-rat n d)
  (let ((g (gcd n d))
        (sign (if (or 
                   (and (positive? n) (positive? d))
                   (and (negative? n) (negative? d)))
                  1
                  -1)))
    (cons (* sign (abs (/ n g))) (abs (/ d g)))))

(define (numer x) (car x))

(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))

(define (make-point x y)
  (cons x y))
(define (x-point p)
  (car p))
(define (y-point p)
  (cdr p))

(define (make-segment start-point end-point)
  (cons start-point end-point))
(define (start-segment s)
  (car s))
(define (end-segment s)
  (cdr s))
(define (midpoint-segment s)
  (let ((average (lambda (x y) (/ (+ x y) 2.0))))
    (make-point (average (x-point (start-segment s))
                         (x-point (end-segment s)))
                (average (y-point (start-segment s))
                         (y-point (end-segment s))))))

(define (print-point p)
  (display "(")
  (display (x-point p))
  (display ", ")
  (display (y-point p))
  (display ")"))

(define (print-line l)
  (newline)
  (print-point (start-segment l))
  (display "--->")
  (print-point (end-segment l)))

(define a (make-point 2 2))
(define b (make-point -2 -2))
(print-point a)
(print-point b)
(newline)

(define l (make-segment a b))

(display "line: ")
(print-line l)
(newline)
(display "midpoint of line: ")
(print-point (midpoint-segment l))

(define (make-rect a b c d)
  (cons a (cons b (cons c d))))

(define (print-rect r)
  (newline)
  (print-point (car r))
  (print-point (car (cdr r)))
  (newline)
  (print-point (car (cdr (cdr r))))
  (print-point (cdr (cdr (cdr r)))))
(define (square x)
  (* x x))

(define (line-length l)
  (sqrt (+ (square (- (x-point (end-segment l))
                      (x-point (start-segment l))))
           (square (- (y-point (end-segment l))
                      (y-point (start-segment l)))))))

(define my-rect (make-rect (make-point 0 0)
                       (make-point 0 2)
                       (make-point 2 2)
                       (make-point 2 0)))

(define (rect-width r)
  (let ((b (car (cdr r)))
        (c (car (cdr (cdr r)))))
    (line-length (make-segment b c))))
      
(define (rect-height r)
  (let ((a (car r))
        (b (car (cdr r))))
    (line-length (make-segment a b))))

(define (rect-perimeter r)
  (* 2 (rect-width r) (rect-height r)))
(define (rect-area r)
  (* (rect-width r) (rect-height r)))

(newline)
(display "perimeter: ")
(rect-perimeter my-rect)
(newline)
(display "area: ")
(rect-area my-rect)
